$date
    Oct 27, 2010  15:37:18
$end
$version
    TOOL:	ncsim	08.10-p002
$end
$timescale
    10 ps
$end

$scope module tb_top_module $end
$var parameter 32 !    datasize  $end
$var parameter 32 "    addrsize  $end
$var wire      1 #    alu_overflow  $end
$var reg      20 $    immediate [19:0] $end
$var reg       5 %    read_address1 [4:0] $end
$var reg       5 &    read_address2 [4:0] $end
$var reg       5 '    write_address [4:0] $end
$var reg       1 (    reset_reg  $end
$var reg       1 )    read  $end
$var reg       1 *    write  $end
$var reg       1 +    enable_execute  $end
$var reg       1 ,    mux2to1_select  $end
$var reg       1 -    imm_reg_select  $end
$var reg       3 .    mux5to1_select [2:0] $end
$var reg       6 /    opcode [5:0] $end
$var reg       5 0    sub_opcode [4:0] $end
$var reg       1 1    clk  $end
$var wire     32 2    R1 [31:0] $end
$var wire     32 3    R2 [31:0] $end
$var wire     32 4    R3 [31:0] $end
$var wire     32 5    write_data [31:0] $end
$var wire     32 6    alu1 [31:0] $end
$var wire     32 7    alu2 [31:0] $end
$var wire     32 8    alu_result [31:0] $end

$scope module top $end
$var parameter 32 9    datasize  $end
$var parameter 32 :    addrsize  $end
$var wire      1 #    alu_overflow  $end
$var wire     20 ;    immediate [19:0] $end
$var wire      5 <    read_address1 [4:0] $end
$var wire      5 =    read_address2 [4:0] $end
$var wire      5 >    write_address [4:0] $end
$var wire      1 ?    reset_reg  $end
$var wire      1 @    read  $end
$var wire      1 A    write  $end
$var wire      1 B    enable_execute  $end
$var wire      1 C    mux2to1_select  $end
$var wire      1 D    imm_reg_select  $end
$var wire      3 E    mux5to1_select [2:0] $end
$var wire      6 F    opcode [5:0] $end
$var wire      5 G    sub_opcode [4:0] $end
$var wire      1 H    clk  $end
$var wire     32 I    read_data1 [31:0] $end
$var wire     32 J    read_data2 [31:0] $end
$var wire     32 K    write_data [31:0] $end
$var wire     32 L    sign_extend [31:0] $end
$var wire     32 M    src2 [31:0] $end
$var wire     32 N    alu_result [31:0] $end
$var wire     20 O    mux5to1_result [19:0] $end
$var wire      1 P    reset  $end

$scope module register $end
$var parameter 32 Q    datasize  $end
$var parameter 32 R    addrsize  $end
$var reg      32 S    read_data1 [31:0] $end
$var reg      32 T    read_data2 [31:0] $end
$var wire      5 <    read_address1 [4:0] $end
$var wire      5 =    read_address2 [4:0] $end
$var wire      5 >    write_address [4:0] $end
$var wire     32 K    write_data [31:0] $end
$var wire      1 H    clk  $end
$var wire      1 P    reset  $end
$var wire      1 @    read  $end
$var wire      1 A    write  $end
$var integer  32 U    i  $end
$upscope $end


$scope module imm_reg $end
$var reg      32 V    src2 [31:0] $end
$var wire     32 J    read_data2 [31:0] $end
$var wire     32 L    immediate [31:0] $end
$var wire      1 D    imm_reg_select  $end
$upscope $end


$scope module sign $end
$var reg      32 W    sign_out [31:0] $end
$var wire     20 O    sign_in [19:0] $end
$upscope $end


$scope module mux5to1 $end
$var reg      20 X    mux5to1_result [19:0] $end
$var wire     20 ;    immediate [19:0] $end
$var wire      3 E    mux5to1_select [2:0] $end
$upscope $end


$scope module alu_m1 $end
$var reg      32 Y    alu_result [31:0] $end
$var reg       1 Z    alu_overflow  $end
$var wire     32 I    read_data1 [31:0] $end
$var wire     32 M    src2 [31:0] $end
$var wire      6 F    opcode [5:0] $end
$var wire      5 G    sub_opcode [4:0] $end
$var wire      1 B    enable_execute  $end
$var reg      64 [    rotate [63:0] $end
$var reg       1 \    a  $end
$var reg       1 ]    b  $end
$upscope $end


$scope module mux2to1 $end
$var reg      32 ^    write_data [31:0] $end
$var wire     32 M    src2 [31:0] $end
$var wire     32 N    alu_result [31:0] $end
$var wire      1 C    mux2to1_select  $end
$upscope $end

$upscope $end

$upscope $end

$enddefinitions $end
$dumpvars
b101 R
b100000 Q
b101 :
b100000 9
b101 "
b100000 !
x#
bx $
b0 %
b0 &
b0 '
1(
0)
0*
0+
0,
0-
b0 .
bx /
bx 0
01
bx 2
bx 3
bx 4
bx 5
bx 6
bx 7
bx 8
bx ;
b0 <
b0 =
b0 >
1?
0@
0A
0B
0C
0D
b0 E
bx F
bx G
0H
bx I
bx J
bx K
bx L
bx M
bx N
bx O
zP
bx S
bx T
b0 U
bx V
bx W
bx X
bx Y
xZ
bx [
x\
x]
bx ^
$end
#5000
11
1H
b0 S
b0 T
b0 J
b0 I
b0 6
b0 V
b0 M
b0 7
b0 ^
b0 5
b0 K
#10000
0(
1*
b100 .
1-
b1 '
b1 $
01
b1 ;
b1 >
0H
1D
b100 E
1A
0?
b1 X
b1 O
b1 W
b1 L
b1 V
b1 M
b1 7
b1 ^
b1 5
b1 K
#15000
11
1H
b1 2
#20000
b10 '
b10000 $
01
b10000 ;
b10 >
0H
b10000 X
b10000 O
b10000 W
b10000 L
b10000 V
b10000 M
b10000 7
b10000 ^
b10000 5
b10000 K
#25000
11
1H
b10000 3
#30000
0*
1)
b0 .
0-
b1 %
b10 &
b11 '
b100000 /
b0 0
01
b11 >
b10 =
b1 <
0H
b0 G
b100000 F
0D
b0 E
1@
0A
b11111111111111110000 X
b11111111111111110000 O
b11111111111111111111111111110000 W
b11111111111111111111111111110000 L
b0 V
b0 M
b0 7
b0 ^
b0 5
b0 K
#35000
11
1H
b1 S
b10000 T
b10000 J
b1 I
b1 6
b10000 V
b10000 M
b10000 7
b10000 ^
b10000 5
b10000 K
#40000
1+
0)
01
0H
0@
1B
bx0000000000000000000000000010001 Y
0\
b10001 Y
0]
0Z
b10001 8
0#
b10001 N
#45000
11
1H
b0 S
b0 T
b0 J
b0 I
b0 6
b0 V
b0 M
b0 7
b0 ^
b0 5
b0 K
#50000
0+
1*
1,
01
0H
1C
1A
0B
b10001 ^
b10001 5
b10001 K
#55000
11
1H
b10001 4
#60000
01
0H
#65000
11
1H
#70000
01
0H
#75000
11
1H
#80000
01
0H
#85000
11
1H
#90000
01
0H
#95000
11
1H
#100000
